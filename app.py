from flask import Flask, render_template, request
from subprocess import Popen, PIPE
import os 
from flask import Flask, render_template, request
from modules.vulnerability_scanner import VulnerabilityScanner
from modules.password_cracker import PasswordCracker
from modules.social_engineering_simulator import SocialEngineeringSimulator

app = Flask(__name__)

scanner = VulnerabilityScanner('models/vulnerability_model.pkl', 'data/vulnerabilities.csv')
cracker = PasswordCracker('data/wordlist.txt')
simulator = SocialEngineeringSimulator()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    ip = request.form['ip']
    vulnerabilities = scanner.scan_and_predict(ip)
    return render_template('result.html', result=vulnerabilities)

@app.route('/crack', methods=['POST'])
def crack():
    hashed_password = request.form['hashed_password']
    password = cracker.crack_password(hashed_password)
    return render_template('result.html', result=password)

@app.route('/phish', methods=['POST'])
def phish():
    email = request.form['email']
    phishing_email = simulator.generate_phishing_email(email)
    return render_template('result.html', result=phishing_email)

def start_password_tools():
    # Start password_tools.py in the background
    script_path = os.path.join(os.path.dirname(__file__), 'password_tools.py')
    process = Popen(['python3', script_path], stdout=PIPE, stderr=PIPE, cwd=os.path.dirname(__file__))
    print("password_tools.py started in the background.")

if __name__ == "__main__":
    start_password_tools()
    app.run(debug=True)
