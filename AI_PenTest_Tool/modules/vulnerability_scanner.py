import os
import nmap
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
import joblib

class VulnerabilityScanner:
    def __init__(self, model_path, data_path):
        self.model_path = model_path
        self.data_path = data_path
        self.vuln_data = pd.read_csv(data_path)
        self.features, self.labels = self.preprocess_data(self.vuln_data)
        if not os.path.exists(model_path):
            self.model = self.train_model()
            self.save_model(self.model, model_path)
        else:
            self.model = self.load_model(model_path)

    def preprocess_data(self, data):
        features = data.drop('vulnerability', axis=1)
        labels = data['vulnerability']
        # One-hot encode categorical features
        encoder = OneHotEncoder()
        encoded_features = encoder.fit_transform(features[['service']])
        # Create a DataFrame from the encoded features
        encoded_features_df = pd.DataFrame(encoded_features.toarray(), columns=encoder.get_feature_names_out(['service']))
        # Drop the original 'service' column and concatenate the encoded features
        features = features.drop('service', axis=1)
        features = pd.concat([features.reset_index(drop=True), encoded_features_df], axis=1)
        return features, labels

    def load_model(self, model_path):
        return joblib.load(model_path)

    def train_model(self):
        model = RandomForestClassifier()
        model.fit(self.features, self.labels)
        return model

    def save_model(self, model, model_path):
        joblib.dump(model, model_path)

    def scan_and_predict(self, ip):
        scanner = nmap.PortScanner()
        scanner.scan(ip)
        
        if ip in scanner.all_hosts():
            scan_data = scanner[ip]
            scan_features = self.extract_features(scan_data)
            prediction = self.model.predict([scan_features])
            predicted_vulnerabilities = self.labels[prediction[0]] if prediction else "No vulnerabilities found."
        else:
            predicted_vulnerabilities = "IP address not found or no vulnerabilities detected."
        
        return predicted_vulnerabilities

    def extract_features(self, scan_data):
        # Simulate feature extraction from scan data
        features = [0] * len(self.features.columns)
        return features

if __name__ == "__main__":
    data_path = 'data/vulnerabilities.csv'
    model_path = 'models/vulnerability_model.pkl'
    scanner = VulnerabilityScanner(model_path, data_path)
    ip_address = '192.168.1.1'
    predicted_vulnerabilities = scanner.scan_and_predict(ip_address)
    print(f"Predicted vulnerabilities for {ip_address}: {predicted_vulnerabilities}")
